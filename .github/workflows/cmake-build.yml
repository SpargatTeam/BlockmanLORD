# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, mingw]
        include:
          - os: windows-latest
            c_compiler: mingw
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: ubuntu-latest
            c_compiler: mingw
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    # we need opengl for glfw
    - name: Install OpenGL dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt update && sudo apt install -y libgl1-mesa-dev mesa-utils freeglut3-dev libglu1-mesa-dev

    - name: Install OpenGL dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: choco install glfw3 -y

    # vulkan 1.3
    - name: Install Vulkan SDK
      uses: jakoch/install-vulkan-sdk-action@v1.1.0
      with:
          vulkan_version: 1.3.283.0
          optional_components: com.lunarg.vulkan.vma
          install_runtime: true
          cache: true
          stripdown: true

    # directx 10, 11 and 12
    - name: Install DirectX SDK (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install directx -y

    # we need open gl es
    - name: Install OpenGLES dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt install -y libgles2-mesa-dev

    # made on linux
    - name: Setup libs and depencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd libs
        git clone https://github.com/glfw/glfw glfw
        git clone https://github.com/madler/zlib zlib
        git clone https://github.com/OGRECave/ogre-next ogre
        git clone https://github.com/assimp/assimp assimp
        git clone https://github.com/bulletphysics/bullet3 bullet
        curl -L -o boost_1_87_0.zip https://archives.boost.io/release/1.87.0/source/boost_1_87_0.zip
        unzip -q boost_1_87_0.zip
        mv boost_1_87_0 boost
        cd ../
        # dev
        #sudo apt install -y cmake ninja-build pkg-config \
        sudo apt install -y build-essential curl git upx binutils 
        # x11
        sudo apt install -y libxcursor-dev libxinerama-dev libx11-dev libxext-dev libxrandr-dev libxi-dev libxtst-dev libxfixes-dev libxcb1-dev libxkbcommon-dev libxaw7-dev 
        # wayland
        sudo apt install -y wayland-protocols libwayland-dev wayland-scanner++ 
        # boost
        sudo apt install -y libboost-all-dev 
        # text, font etc
        sudo apt install -y libpng-dev libjpeg-dev libtiff-dev libopenexr-dev libfreeimage-dev libfreetype6-dev 
        # xml
        sudo apt install -y libpugixml-dev libjsoncpp-dev 

    # made on windows
    - name: Setup libs and dependencies
      if: matrix.os == 'windows-latest'
      run: |
        Invoke-WebRequest -Uri https://github.com/msys2/msys2-installer/releases/download/2024-12-08/msys2-x86_64-20241208.exee -OutFile msys2-installer.exe
        Start-Process msys2-installer.exe -ArgumentList '/S' -Wait
        rm msys2-installer.exe
        choco source add -n chocolatey -s 'https://chocolatey.org/api/v2/'
        C:\msys64\usr\bin\bash.exe -c "pacman -Syu --noconfirm"
        C:\msys64\usr\bin\bash.exe -c "pacman -S --noconfirm mingw-w64-x86_64-zlib"
        choco install visualstudio2019-buildtools -y # this will install vs2019 build tools, needed for compille
        git clone https://github.com/microsoft/vcpkg.git vcpkg
        cd vcpkg
        ./bootstrap-vcpkg.bat
        ./vcpkg install zlib
        cd ../
        cd libs
        git clone https://github.com/glfw/glfw glfw
        git clone https://github.com/madler/zlib zlib
        git clone https://github.com/OGRECave/ogre-next ogre
        git clone https://github.com/assimp/assimp assimp
        git clone https://github.com/bulletphysics/bullet3 bullet
        curl -L -o boost_1_87_0.zip https://archives.boost.io/release/1.87.0/source/boost_1_87_0.zip
        choco install 7zip -y
        7z x boost_1_87_0.zip -aoa -o"./boost"
        cd ../

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake .
      #run: >
      #  cmake -B ${{ steps.strings.outputs.build-output-dir }}
      #  -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
      #  -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
      #  -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
      #  -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build . #${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
