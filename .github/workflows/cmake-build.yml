name: CMake Build

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Debug]
        c_compiler: [gcc, clang, mingw]
        include:
          - os: windows-latest
            c_compiler: clang
            cpp_compiler: clang++
            makefile: MinGW Makefiles
            framework: gl
          - os: windows-latest
            c_compiler: clang
            cpp_compiler: clang++
            makefile: MinGW Makefiles
            framework: vk
          - os: windows-latest
            c_compiler: clang
            cpp_compiler: clang++
            makefile: MinGW Makefiles
            framework: d3d
          - os: windows-latest
            c_compiler: i686-w64-mingw32-gcc
            cpp_compiler: i686-w64-mingw32-g++
            makefile: MinGW Makefiles
            framework: gl
          - os: windows-latest
            c_compiler: i686-w64-mingw32-gcc
            cpp_compiler: i686-w64-mingw32-g++
            makefile: MinGW Makefiles
            framework: vk
          - os: windows-latest
            c_compiler: i686-w64-mingw32-gcc
            cpp_compiler: i686-w64-mingw32-g++
            makefile: MinGW Makefiles
            framework: d3d
          - os: windows-latest
            c_compiler: x86_64-w64-mingw32-gcc
            cpp_compiler: x86_64-w64-mingw32-g++
            makefile: MinGW Makefiles
            framework: gl
          - os: windows-latest
            c_compiler: x86_64-w64-mingw32-gcc
            cpp_compiler: x86_64-w64-mingw32-g++
            makefile: MinGW Makefiles
            framework: vk
          - os: windows-latest
            c_compiler: x86_64-w64-mingw32-gcc
            cpp_compiler: x86_64-w64-mingw32-g++
            makefile: MinGW Makefiles
            framework: d3d
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            makefile: Unix Makefiles
            framework: gl
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            makefile: Unix Makefiles
            framework: gl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            makefile: Unix Makefiles
            framework: vk
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            makefile: Unix Makefiles
            framework: vk
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
            makefile: Unix Makefiles
            framework: gl
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
            makefile: Unix Makefiles
            framework: vk
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: macos-latest
            c_compiler: gcc

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    # we need opengl for glfw
    - name: Install OpenGL dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest' && matrix.framework == 'gl'
      run: sudo apt update && sudo apt install -y libgl1-mesa-dev mesa-utils freeglut3-dev libglu1-mesa-dev

    - name: Install OpenGL dependencies (Windows)
      if: matrix.os == 'windows-latest' && matrix.framework == 'gl'
      run: choco install glfw3 -y

    - name: Install OpenGL dependencies (macOS)
      if: matrix.os == 'macos-latest' && matrix.framework == 'gl'
      run: |
        brew install glfw
        brew install --cask xquartz

    # vulkan 1.3
    - name: Install Vulkan SDK
      uses: jakoch/install-vulkan-sdk-action@v1.1.0
      if: matrix.framework == 'vk'
      with:
          vulkan_version: 1.3.283.0
          optional_components: com.lunarg.vulkan.vma
          install_runtime: true
          cache: true
          stripdown: true

    # directx 10, 11 and 12
    - name: Install DirectX SDK (Windows)
      if: matrix.os == 'windows-latest' && matrix.framework == 'd3d'
      run: |
        choco install directx -y

    # we need open gl es
    - name: Install OpenGLES dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest' && matrix.framework == 'gl'
      run: sudo apt install -y libgles2-mesa-dev

    # made on linux
    - name: Setup libs and depencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd libs
        git clone https://github.com/glfw/glfw glfw
        git clone https://github.com/madler/zlib zlib
        git clone https://github.com/assimp/assimp assimp
        git clone https://github.com/bulletphysics/bullet3 bullet
        git clone https://github.com/curl/curl curl
        git clone https://github.com/libsdl-org/SDL sdl
        curl -L -o boost_1_87_0.zip https://archives.boost.io/release/1.87.0/source/boost_1_87_0.zip
        unzip -q boost_1_87_0.zip
        mv boost_1_87_0 boost
        cd ../
        # dev
        sudo apt install -y build-essential curl git upx binutils 
        # x11
        sudo apt install -y libxcursor-dev libxinerama-dev libx11-dev libxext-dev libxrandr-dev libxi-dev libxtst-dev libxfixes-dev libxcb1-dev libxkbcommon-dev libxaw7-dev 
        # wayland
        sudo apt install -y wayland-protocols libwayland-dev wayland-scanner++ 
        # boost
        sudo apt install -y libboost-all-dev 
        # text, font etc
        sudo apt install -y libpng-dev libjpeg-dev libtiff-dev libopenexr-dev libfreeimage-dev libfreetype6-dev 
        # xml
        sudo apt install -y libpugixml-dev libjsoncpp-dev 

    # made on windows
    - name: Setup libs and dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install mingw
        cd libs
        git clone https://github.com/glfw/glfw glfw
        git clone https://github.com/madler/zlib zlib
        git clone https://github.com/assimp/assimp assimp
        git clone https://github.com/bulletphysics/bullet3 bullet
        git clone https://github.com/curl/curl curl
        git clone https://github.com/libsdl-org/SDL sdl
        curl -L -o boost_1_87_0.zip https://archives.boost.io/release/1.87.0/source/boost_1_87_0.zip
        choco install 7zip -y
        7z x boost_1_87_0.zip -aoa -o"./boost"
        cd ../

    # made on macos
    - name: Setup libs and dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        cd libs
        git clone https://github.com/glfw/glfw glfw
        git clone https://github.com/madler/zlib zlib
        git clone https://github.com/assimp/assimp assimp
        git clone https://github.com/bulletphysics/bullet3 bullet
        git clone https://github.com/curl/curl curl
        git clone https://github.com/libsdl-org/SDL sdl
        curl -L -o boost_1_87_0.zip https://archives.boost.io/release/1.87.0/source/boost_1_87_0.zip
        unzip -q boost_1_87_0.zip
        mv boost_1_87_0 boost
        cd ../
        # dev
        brew install cmake curl git upx binutils
        # x11
        brew install libxcursor libxinerama libx11 libxext libxrandr libxi libxtst libxfixes libxcb libxkbcommon libxaw
        # boost
        brew install boost
        # text, font etc
        brew install libpng libjpeg libtiff openexr freeimage freetype
        # xml
        brew install pugixml jsoncpp

    - name: Configure CMake
      run: >
        cmake -G "${{ matrix.makefile }}" -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DFRAMEWORK=${{ matrix.framework }}

    - name: Build
      run: cmake --build .